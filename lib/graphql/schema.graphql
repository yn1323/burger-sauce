"""
Use to check whether or not a user is authenticated and is associated
with an optional set of roles.
"""
directive @requireAuth(roles: [String]) on FIELD_DEFINITION

"""Use to skip authentication checks and allow public access."""
directive @skipAuth on FIELD_DEFINITION

"""Exposes a URL that specifies the behavior of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behavior of this scalar."""
  url: String!
) on SCALAR

type Ability {
  id: String!
  name: String!
  detail: String!
  battleIndex: String!
  pokemons: [Pokemon!]!
  battleDataAbilities: [BattleDataAbility!]!
  myPokemon: [MyPokemon!]!
  myEnemy: [MyEnemy!]!
}

type AttackType {
  id: String!
  name: String!
  moves: [Move!]!
  imageUrl: String!
}

type BattleData {
  id: String!
  battleIndex: BattleIndex!
  battleIndexId: String!
  pokemon: Pokemon!
  pokemonId: String!
  no: String!
  rank: Int!
  battleDataMove: [BattleDataMove!]!
  battleDataAbility: [BattleDataAbility!]!
  battleDataNature: [BattleDataNature!]!
  battleDataItem: [BattleDataItem!]!
  battleDataTerastal: [BattleDataTerastal!]!
  form: Form
  formId: String
}

type BattleDataAbility {
  id: String!
  ability: Ability!
  abilityId: String!
  rate: Float!
  battleData: BattleData!
  battleDataId: String!
}

type BattleDataItem {
  id: String!
  item: Item!
  itemId: String!
  rate: Float!
  battleData: BattleData!
  battleDataId: String!
}

type BattleDataMove {
  id: String!
  move: Move!
  moveId: String!
  rate: Float!
  battleData: BattleData!
  battleDataId: String!
}

type BattleDataNature {
  id: String!
  nature: Nature!
  natureId: String!
  rate: Float!
  battleData: BattleData!
  battleDataId: String!
}

type BattleDataTerastal {
  id: String!
  type: Type!
  typeId: String!
  rate: Float!
  battleData: BattleData!
  battleDataId: String!
}

type BattleIndex {
  id: String!
  capturedAt: DateTime!
  startAt: DateTime!
  endAt: DateTime!
  name: String!
  battleData: [BattleData!]!
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar BigInt

input CreateAbilityInput {
  name: String!
  detail: String!
  battleIndex: String!
}

input CreateAttackTypeInput {
  name: String!
  imageUrl: String!
}

input CreateBattleDataAbilityInput {
  abilityId: String!
  rate: Float!
  battleDataId: String!
}

input CreateBattleDataInput {
  battleIndexId: String!
  pokemonId: String!
  no: String!
  rank: Int!
  formId: String
}

input CreateBattleDataItemInput {
  itemId: String!
  rate: Float!
  battleDataId: String!
}

input CreateBattleDataMoveInput {
  moveId: String!
  rate: Float!
  battleDataId: String!
}

input CreateBattleDataNatureInput {
  natureId: String!
  rate: Float!
  battleDataId: String!
}

input CreateBattleDataTerastalInput {
  typeId: String!
  rate: Float!
  battleDataId: String!
}

input CreateBattleIndexInput {
  capturedAt: DateTime!
  startAt: DateTime!
  endAt: DateTime!
  name: String!
}

input CreateEvolutionInput {
  pokemonId: String!
}

input CreateFormInput {
  no: String!
  formType: String!
  formType2: String!
  name: String!
}

input CreateItemInput {
  name: String!
  detail: String!
  battleIndex: String!
  base64Image: String!
  imageUrl: String!
  imageSmallUrl: String!
  imageLargeUrl: String!
}

input CreateMoveInput {
  detail: String!
  name: String!
  typeId: String
  attackTypeId: String
  power: Int!
  accuracy: Int!
  pp: Int!
  isContact: Boolean!
  isQuick: Boolean!
  isDelay: Boolean!
  isChangeable: Boolean!
  isMultipleAttack: Boolean!
  isMustCritical: Boolean!
  isPunch: Boolean!
  isSound: Boolean!
  isPowder: Boolean!
  isWave: Boolean!
  isJaw: Boolean!
  isBullet: Boolean!
  isDance: Boolean!
  isWind: Boolean!
  isCut: Boolean!
  battleIndex: String!
}

input CreateMyEnemyInput {
  name: String!
  favorite: Boolean!
  evH: Int!
  evA: Int!
  evB: Int!
  evC: Int!
  evD: Int!
  evS: Int!
  memo: String!
  pokemonId: String!
  itemId: String
  abilityId: String
  natureId: String!
  terastalId: String
  userId: String!
}

input CreateMyEnemyTagInput {
  name: String!
  favorite: Boolean!
  memo: String!
  userId: String!
}

input CreateMyPartyInput {
  name: String!
  favorite: Boolean!
  memo: String!
  userId: String!
}

input CreateMyPartyTagInput {
  name: String!
  favorite: Boolean!
  memo: String!
  userId: String!
}

input CreateMyPokemonConsInput {
  myPokemonId: String!
  myEnemyId: String!
}

input CreateMyPokemonInput {
  name: String!
  favorite: Boolean!
  evH: Int!
  evA: Int!
  evB: Int!
  evC: Int!
  evD: Int!
  evS: Int!
  memo: String!
  pokemonId: String!
  itemId: String
  abilityId: String
  natureId: String!
  terastalId: String
  userId: String!
}

input CreateMyPokemonProsInput {
  myPokemonId: String!
  myEnemyId: String!
}

input CreateMyPokemonTagInput {
  name: String!
  favorite: Boolean!
  memo: String!
  userId: String!
}

input CreateNatureInput {
  name: String!
  battleIndex: String!
  increase: String!
  decrease: String!
}

input CreatePokemonInput {
  name: String!
  form: String!
  no: Int!
  height: Float!
  weight: Float!
  statusH: Int!
  statusA: Int!
  statusB: Int!
  statusC: Int!
  statusD: Int!
  statusS: Int!
  base64Image: String!
  imageUrl: String!
  imageSmallUrl: String!
  imageLargeUrl: String!
  url: String!
  battleIndex: String!
  battleFormIndex: String!
}

input CreateTypeInput {
  name: String!
  battleIndex: String!
  textImageUrl: String!
  imageUrl: String!
  terastalImageUrl: String!
}

input CreateTypeRelationInput {
  fromId: String!
  toId: String!
  rate: Float!
}

input CreateUserInput {
  name: String!
  createdUserAt: DateTime!
  updatedUserAt: DateTime!
  deletedUserAt: DateTime
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format
outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for
representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Evolution {
  id: String!
  pokemon: Pokemon!
  pokemonId: String!
  from: [Pokemon!]!
  to: [Pokemon!]!
}

type Form {
  id: String!
  no: String!
  formType: String!
  formType2: String!
  name: String!
  battleData: [BattleData!]!
}

type Item {
  id: String!
  name: String!
  detail: String!
  battleIndex: String!
  base64Image: String!
  imageUrl: String!
  imageSmallUrl: String!
  imageLargeUrl: String!
  battleDataItem: [BattleDataItem!]!
  myPokemon: [MyPokemon!]!
  myEnemy: [MyEnemy!]!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

type Move {
  id: String!
  detail: String!
  name: String!
  type: Type
  typeId: String
  attackType: AttackType
  attackTypeId: String
  power: Int!
  accuracy: Int!
  pp: Int!
  isContact: Boolean!
  isQuick: Boolean!
  isDelay: Boolean!
  isChangeable: Boolean!
  isMultipleAttack: Boolean!
  isMustCritical: Boolean!
  isPunch: Boolean!
  isSound: Boolean!
  isPowder: Boolean!
  isWave: Boolean!
  isJaw: Boolean!
  isBullet: Boolean!
  isDance: Boolean!
  isWind: Boolean!
  isCut: Boolean!
  pokemons: [Pokemon!]!
  battleIndex: String!
  battleDataMoves: [BattleDataMove!]!
  myPokemon: [MyPokemon!]!
  myEnemy: [MyEnemy!]!
}

type Mutation {
  createAbility(input: CreateAbilityInput!): Ability!
  updateAbility(id: String!, input: UpdateAbilityInput!): Ability!
  deleteAbility(id: String!): Ability!
  createAttackType(input: CreateAttackTypeInput!): AttackType!
  updateAttackType(id: String!, input: UpdateAttackTypeInput!): AttackType!
  deleteAttackType(id: String!): AttackType!
  createBattleDataAbility(input: CreateBattleDataAbilityInput!): BattleDataAbility!
  updateBattleDataAbility(id: String!, input: UpdateBattleDataAbilityInput!): BattleDataAbility!
  deleteBattleDataAbility(id: String!): BattleDataAbility!
  createBattleDataItem(input: CreateBattleDataItemInput!): BattleDataItem!
  updateBattleDataItem(id: String!, input: UpdateBattleDataItemInput!): BattleDataItem!
  deleteBattleDataItem(id: String!): BattleDataItem!
  createBattleDataMove(input: CreateBattleDataMoveInput!): BattleDataMove!
  updateBattleDataMove(id: String!, input: UpdateBattleDataMoveInput!): BattleDataMove!
  deleteBattleDataMove(id: String!): BattleDataMove!
  createBattleDataNature(input: CreateBattleDataNatureInput!): BattleDataNature!
  updateBattleDataNature(id: String!, input: UpdateBattleDataNatureInput!): BattleDataNature!
  deleteBattleDataNature(id: String!): BattleDataNature!
  createBattleDataTerastal(input: CreateBattleDataTerastalInput!): BattleDataTerastal!
  updateBattleDataTerastal(id: String!, input: UpdateBattleDataTerastalInput!): BattleDataTerastal!
  deleteBattleDataTerastal(id: String!): BattleDataTerastal!
  createBattleData(input: CreateBattleDataInput!): BattleData!
  updateBattleData(id: String!, input: UpdateBattleDataInput!): BattleData!
  deleteBattleData(id: String!): BattleData!
  createBattleIndex(input: CreateBattleIndexInput!): BattleIndex!
  updateBattleIndex(id: String!, input: UpdateBattleIndexInput!): BattleIndex!
  deleteBattleIndex(id: String!): BattleIndex!
  createEvolution(input: CreateEvolutionInput!): Evolution!
  updateEvolution(id: String!, input: UpdateEvolutionInput!): Evolution!
  deleteEvolution(id: String!): Evolution!
  createForm(input: CreateFormInput!): Form!
  updateForm(id: String!, input: UpdateFormInput!): Form!
  deleteForm(id: String!): Form!
  createItem(input: CreateItemInput!): Item!
  updateItem(id: String!, input: UpdateItemInput!): Item!
  deleteItem(id: String!): Item!
  createMove(input: CreateMoveInput!): Move!
  updateMove(id: String!, input: UpdateMoveInput!): Move!
  deleteMove(id: String!): Move!
  createMyEnemy(input: CreateMyEnemyInput!): MyEnemy!
  updateMyEnemy(id: String!, input: UpdateMyEnemyInput!): MyEnemy!
  deleteMyEnemy(id: String!): MyEnemy!
  createMyEnemyTag(input: CreateMyEnemyTagInput!): MyEnemyTag!
  updateMyEnemyTag(id: String!, input: UpdateMyEnemyTagInput!): MyEnemyTag!
  deleteMyEnemyTag(id: String!): MyEnemyTag!
  createMyParty(input: CreateMyPartyInput!): MyParty!
  updateMyParty(id: String!, input: UpdateMyPartyInput!): MyParty!
  deleteMyParty(id: String!): MyParty!
  createMyPartyTag(input: CreateMyPartyTagInput!): MyPartyTag!
  updateMyPartyTag(id: String!, input: UpdateMyPartyTagInput!): MyPartyTag!
  deleteMyPartyTag(id: String!): MyPartyTag!
  createMyPokemonCons(input: CreateMyPokemonConsInput!): MyPokemonCons!
  updateMyPokemonCons(id: String!, input: UpdateMyPokemonConsInput!): MyPokemonCons!
  deleteMyPokemonCons(id: String!): MyPokemonCons!
  createMyPokemonPros(input: CreateMyPokemonProsInput!): MyPokemonPros!
  updateMyPokemonPros(id: String!, input: UpdateMyPokemonProsInput!): MyPokemonPros!
  deleteMyPokemonPros(id: String!): MyPokemonPros!
  createMyPokemonTag(input: CreateMyPokemonTagInput!): MyPokemonTag!
  updateMyPokemonTag(id: String!, input: UpdateMyPokemonTagInput!): MyPokemonTag!
  deleteMyPokemonTag(id: String!): MyPokemonTag!
  createMyPokemon(input: CreateMyPokemonInput!): MyPokemon!
  updateMyPokemon(id: String!, input: UpdateMyPokemonInput!): MyPokemon!
  deleteMyPokemon(id: String!): MyPokemon!
  createNature(input: CreateNatureInput!): Nature!
  updateNature(id: String!, input: UpdateNatureInput!): Nature!
  deleteNature(id: String!): Nature!
  createPokemon(input: CreatePokemonInput!): Pokemon!
  updatePokemon(id: String!, input: UpdatePokemonInput!): Pokemon!
  deletePokemon(id: String!): Pokemon!
  createTypeRelation(input: CreateTypeRelationInput!): TypeRelation!
  updateTypeRelation(id: String!, input: UpdateTypeRelationInput!): TypeRelation!
  deleteTypeRelation(id: String!): TypeRelation!
  createType(input: CreateTypeInput!): Type!
  updateType(id: String!, input: UpdateTypeInput!): Type!
  deleteType(id: String!): Type!
  createUser(input: CreateUserInput!): User!
  updateUser(id: String!, input: UpdateUserInput!): User!
  deleteUser(id: String!): User!
}

type MyEnemy {
  id: String!
  name: String!
  favorite: Boolean!
  evH: Int!
  evA: Int!
  evB: Int!
  evC: Int!
  evD: Int!
  evS: Int!
  memo: String!
  tag: [MyEnemyTag!]!
  pokemon: Pokemon!
  pokemonId: String!
  item: Item
  itemId: String
  ability: Ability
  abilityId: String
  nature: Nature!
  natureId: String!
  terastal: Type
  terastalId: String
  moves: [Move!]!
  user: User!
  userId: String!
  myPokemonPros: [MyPokemonPros!]!
  myPokemonCons: [MyPokemonCons!]!
}

type MyEnemyTag {
  id: String!
  name: String!
  favorite: Boolean!
  memo: String!
  myEnemy: [MyEnemy!]!
  user: User!
  userId: String!
}

type MyParty {
  id: String!
  name: String!
  favorite: Boolean!
  memo: String!
  tag: [MyPartyTag!]!
  user: User!
  userId: String!
  myPokemon: [MyPokemon!]!
}

type MyPartyTag {
  id: String!
  name: String!
  favorite: Boolean!
  memo: String!
  myParty: [MyParty!]!
  user: User!
  userId: String!
}

type MyPokemon {
  id: String!
  name: String!
  favorite: Boolean!
  evH: Int!
  evA: Int!
  evB: Int!
  evC: Int!
  evD: Int!
  evS: Int!
  memo: String!
  tag: [MyPokemonTag!]!
  pokemon: Pokemon!
  pokemonId: String!
  item: Item
  itemId: String
  ability: Ability
  abilityId: String
  nature: Nature!
  natureId: String!
  terastal: Type
  terastalId: String
  moves: [Move!]!
  myParty: [MyParty!]!
  user: User!
  userId: String!
  myPokemonPros: [MyPokemonPros!]!
  myPokemonCons: [MyPokemonCons!]!
}

type MyPokemonCons {
  id: String!
  myPokemon: MyPokemon!
  myPokemonId: String!
  myEnemy: MyEnemy!
  myEnemyId: String!
}

type MyPokemonPros {
  id: String!
  myPokemon: MyPokemon!
  myPokemonId: String!
  myEnemy: MyEnemy!
  myEnemyId: String!
}

type MyPokemonTag {
  id: String!
  name: String!
  favorite: Boolean!
  memo: String!
  myPokemon: [MyPokemon!]!
  user: User!
  userId: String!
}

type Nature {
  id: String!
  name: String!
  battleIndex: String!
  increase: String!
  decrease: String!
  battleDataNature: [BattleDataNature!]!
  myPokemon: [MyPokemon!]!
  myEnemy: [MyEnemy!]!
}

type Pokemon {
  id: String!
  name: String!
  form: String!
  no: Int!
  height: Float!
  weight: Float!
  types: [Type!]!
  statusH: Int!
  statusA: Int!
  statusB: Int!
  statusC: Int!
  statusD: Int!
  statusS: Int!
  abilities: [Ability!]!
  moves: [Move!]!
  base64Image: String!
  imageUrl: String!
  imageSmallUrl: String!
  imageLargeUrl: String!
  url: String!
  battleIndex: String!
  battleFormIndex: String!
  battleData: [BattleData!]!
  myPokemon: [MyPokemon!]!
  myEnemy: [MyEnemy!]!
  evolutionFrom: [Evolution!]!
  evolutionTo: [Evolution!]!
  evolutions: [Evolution!]!
}

input PokemonSearchOption {
  condition: String
  evolvedOnly: Boolean
}

"""About the Redwood queries."""
type Query {
  """Fetches the Redwood root schema."""
  redwood: Redwood
  filterMyPokemons(userId: String!): [MyPokemon!]!
  filterMyParties(userId: String!): [MyParty!]!
  filterMyPokemonTags(userId: String!): [MyPokemonTag!]!
  filterMyPartyTags(userId: String!): [MyPartyTag!]!
  battleDatasLatest: [BattleData!]!
  pokemonSearch(name: String, types: [String!], moves: [String!], abilities: [String!], options: PokemonSearchOption): [Pokemon!]!
  abilities: [Ability!]!
  ability(id: String!): Ability
  attackTypes: [AttackType!]!
  attackType(id: String!): AttackType
  battleDataAbilities: [BattleDataAbility!]!
  battleDataAbility(id: String!): BattleDataAbility
  battleDataItems: [BattleDataItem!]!
  battleDataItem(id: String!): BattleDataItem
  battleDataMoves: [BattleDataMove!]!
  battleDataMove(id: String!): BattleDataMove
  battleDataNatures: [BattleDataNature!]!
  battleDataNature(id: String!): BattleDataNature
  battleDataTerastals: [BattleDataTerastal!]!
  battleDataTerastal(id: String!): BattleDataTerastal
  battleDatas: [BattleData!]!
  battleData(id: String!): BattleData
  battleIndices: [BattleIndex!]!
  battleIndex(id: String!): BattleIndex
  evolutions: [Evolution!]!
  evolution(id: String!): Evolution
  forms: [Form!]!
  form(id: String!): Form
  items: [Item!]!
  item(id: String!): Item
  moves: [Move!]!
  move(id: String!): Move
  myEnemies: [MyEnemy!]!
  myEnemy(id: String!): MyEnemy
  myEnemyTags: [MyEnemyTag!]!
  myEnemyTag(id: String!): MyEnemyTag
  myParties: [MyParty!]!
  myParty(id: String!): MyParty
  myPartyTags: [MyPartyTag!]!
  myPartyTag(id: String!): MyPartyTag
  myPokemonConses: [MyPokemonCons!]!
  myPokemonCons(id: String!): MyPokemonCons
  myPokemonProses: [MyPokemonPros!]!
  myPokemonPros(id: String!): MyPokemonPros
  myPokemonTags: [MyPokemonTag!]!
  myPokemonTag(id: String!): MyPokemonTag
  myPokemons: [MyPokemon!]!
  myPokemon(id: String!): MyPokemon
  natures: [Nature!]!
  nature(id: String!): Nature
  pokemons: [Pokemon!]!
  pokemon(id: String!): Pokemon
  typeRelations: [TypeRelation!]!
  typeRelation(id: String!): TypeRelation
  types: [Type!]!
  type(id: String!): Type
  users: [User!]!
  user(id: String!): User
}

"""
The RedwoodJS Root Schema

Defines details about RedwoodJS such as the current user and version information.
"""
type Redwood {
  """The version of Redwood."""
  version: String

  """The current user."""
  currentUser: JSON

  """The version of Prisma."""
  prismaVersion: String
}

"""
A time string at UTC, such as 10:15:30Z, compliant with the `full-time` format
outlined in section 5.6 of the RFC 3339profile of the ISO 8601 standard for
representation of dates and times using the Gregorian calendar.
"""
scalar Time

type Type {
  id: String!
  name: String!
  battleIndex: String!
  fromTypes: [TypeRelation!]!
  toTypes: [TypeRelation!]!
  moves: [Move!]!
  pokemons: [Pokemon!]!
  battleDataTerastal: [BattleDataTerastal!]!
  MyPokemon: [MyPokemon!]!
  textImageUrl: String!
  imageUrl: String!
  terastalImageUrl: String!
  myEnemy: [MyEnemy!]!
}

type TypeRelation {
  id: String!
  from: Type!
  fromId: String!
  to: Type!
  toId: String!
  rate: Float!
}

input UpdateAbilityInput {
  name: String
  detail: String
  battleIndex: String
}

input UpdateAttackTypeInput {
  name: String
  imageUrl: String
}

input UpdateBattleDataAbilityInput {
  abilityId: String
  rate: Float
  battleDataId: String
}

input UpdateBattleDataInput {
  battleIndexId: String
  pokemonId: String
  no: String
  rank: Int
  formId: String
}

input UpdateBattleDataItemInput {
  itemId: String
  rate: Float
  battleDataId: String
}

input UpdateBattleDataMoveInput {
  moveId: String
  rate: Float
  battleDataId: String
}

input UpdateBattleDataNatureInput {
  natureId: String
  rate: Float
  battleDataId: String
}

input UpdateBattleDataTerastalInput {
  typeId: String
  rate: Float
  battleDataId: String
}

input UpdateBattleIndexInput {
  capturedAt: DateTime
  startAt: DateTime
  endAt: DateTime
  name: String
}

input UpdateEvolutionInput {
  pokemonId: String
}

input UpdateFormInput {
  no: String
  formType: String
  formType2: String
  name: String
}

input UpdateItemInput {
  name: String
  detail: String
  battleIndex: String
  base64Image: String
  imageUrl: String
  imageSmallUrl: String
  imageLargeUrl: String
}

input UpdateMoveInput {
  detail: String
  name: String
  typeId: String
  attackTypeId: String
  power: Int
  accuracy: Int
  pp: Int
  isContact: Boolean
  isQuick: Boolean
  isDelay: Boolean
  isChangeable: Boolean
  isMultipleAttack: Boolean
  isMustCritical: Boolean
  isPunch: Boolean
  isSound: Boolean
  isPowder: Boolean
  isWave: Boolean
  isJaw: Boolean
  isBullet: Boolean
  isDance: Boolean
  isWind: Boolean
  isCut: Boolean
  battleIndex: String
}

input UpdateMyEnemyInput {
  name: String
  favorite: Boolean
  evH: Int
  evA: Int
  evB: Int
  evC: Int
  evD: Int
  evS: Int
  memo: String
  pokemonId: String
  itemId: String
  abilityId: String
  natureId: String
  terastalId: String
  userId: String
}

input UpdateMyEnemyTagInput {
  name: String
  favorite: Boolean
  memo: String
  userId: String
}

input UpdateMyPartyInput {
  name: String
  favorite: Boolean
  memo: String
  userId: String
}

input UpdateMyPartyTagInput {
  name: String
  favorite: Boolean
  memo: String
  userId: String
}

input UpdateMyPokemonConsInput {
  myPokemonId: String
  myEnemyId: String
}

input UpdateMyPokemonInput {
  name: String
  favorite: Boolean
  evH: Int
  evA: Int
  evB: Int
  evC: Int
  evD: Int
  evS: Int
  memo: String
  pokemonId: String
  itemId: String
  abilityId: String
  natureId: String
  terastalId: String
  userId: String
}

input UpdateMyPokemonProsInput {
  myPokemonId: String
  myEnemyId: String
}

input UpdateMyPokemonTagInput {
  name: String
  favorite: Boolean
  memo: String
  userId: String
}

input UpdateNatureInput {
  name: String
  battleIndex: String
  increase: String
  decrease: String
}

input UpdatePokemonInput {
  name: String
  form: String
  no: Int
  height: Float
  weight: Float
  statusH: Int
  statusA: Int
  statusB: Int
  statusC: Int
  statusD: Int
  statusS: Int
  base64Image: String
  imageUrl: String
  imageSmallUrl: String
  imageLargeUrl: String
  url: String
  battleIndex: String
  battleFormIndex: String
}

input UpdateTypeInput {
  name: String
  battleIndex: String
  textImageUrl: String
  imageUrl: String
  terastalImageUrl: String
}

input UpdateTypeRelationInput {
  fromId: String
  toId: String
  rate: Float
}

input UpdateUserInput {
  name: String
  createdUserAt: DateTime
  updatedUserAt: DateTime
  deletedUserAt: DateTime
}

type User {
  id: String!
  name: String!
  createdUserAt: DateTime!
  updatedUserAt: DateTime!
  deletedUserAt: DateTime
  myPokemon: [MyPokemon!]!
  myParty: [MyParty!]!
  myPartyTag: [MyPartyTag!]!
  myPokemonTag: [MyPokemonTag!]!
  myEnemy: [MyEnemy!]!
  myEnemyTag: [MyEnemyTag!]!
}

